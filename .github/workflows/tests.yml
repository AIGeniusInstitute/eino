name: Tests

on: [ push, pull_request ]

jobs:
  unit_test:
    name: "eino unit test"
    runs-on: ubuntu-latest
    steps:
      - name: unit test
        uses: actions/codecov
        inputs:
          driver: go
          commands:
            - modules=`find . -name "go.mod" -exec dirname {} \;`
            - echo $modules
            - list=""
            - coverpkg=""
            - if [[ ! -f "go.work" ]];then go work init;fi
            - for module in $modules; do go work use $module; list=$module"/... "$list; coverpkg=$module"/...,"$coverpkg; done
            - go work sync
            - go test -coverprofile=coverage.out -gcflags="all=-l -N" -coverpkg=$coverpkg $list
          config:
            status:
              project:
                eino:
                  minimum_coverage: 65%
                  paths:
                    - "!tests"
                    - "!examples/**"
                    - "!*/examples/**"
                    - "!*/mock/**"
                eino-changed:
                  base: "change"
                  threshold: 0.8%
                  paths:
                    - "!tests"
                    - "!examples/**"
                    - "!*/examples/**"
                    - "!*/mock/**"
              diff:
                eino:
                  line_limit: 10 # 增量行数少于多少行时，默认置成功
                  minimum_coverage: 50%
                  paths:
                    - "!tests"
                    - "!examples/**"
                    - "!*/examples/**"
                    - "!*/mock/**"
      - name: Sonar
        uses: actions/sonar@v1
        inputs:
          coverage_path: /tmp/coverage.out
          coverage_type: go
          disable_quality_gates: true
          exclusions_list:
            - "!tests"
            - "examples/**"
            - "*/mock/**"
          language: go
  unit-benchmark-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Unit Test
        run: go test -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Benchmark
        run: go test -bench=. -benchmem -run=none ./...

  compatibility-test:
    strategy:
      matrix:
        go: [ "1.18", "1.19", "1.20", "1.21", "1.22" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: true # don't use cache for self-hosted runners
      - name: Unit Test
        run: go test -race -covermode=atomic ./...